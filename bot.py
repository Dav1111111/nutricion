import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.session.aiohttp import AiohttpSession
from sqlalchemy.ext.asyncio import AsyncSession

from config.config import config
from database.connection import db_connection
from handlers.command_handlers import register_command_handlers
from handlers.message_handlers import register_message_handlers
from handlers.callback_handlers import register_callback_handlers
from services.ai_service import ai_service
from services.payment_service import payment_service
from services.subscription_renewal_service import subscription_renewal_service
from database.subscription_repository import subscription_repository

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏ –±–æ—Ç–∞
session = AiohttpSession()
bot = Bot(token=config.TELEGRAM_BOT_TOKEN, session=session)

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
register_command_handlers(dp)
register_message_handlers(dp)
register_callback_handlers(dp)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–µ—Å—Å–∏–∏ –ë–î –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def db_session_middleware(handler, event, data):
    """–ú–∏–¥–¥–ª–≤–∞—Ä –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–µ—Å—Å–∏–∏ –ë–î –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
    async with db_connection.async_session() as session:
        data["db"] = session
        return await handler(event, data)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–¥–¥–ª–≤–∞—Ä–∞
dp.update.middleware(db_session_middleware)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await db_connection.init_db()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(config.IMAGES_DIR, exist_ok=True)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, —á—Ç–æ–±—ã –æ–Ω–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Å–∏–Ω–µ–º –º–µ–Ω—é Telegram
        commands = [
            ("calories", "üéØ –ó–∞–¥–∞—Ç—å —Ü–µ–ª—å"),
            ("day_calories", "üìä –ö–∞–ª–æ—Ä–∏–∏ –∑–∞ –¥–µ–Ω—å"),
            ("today_meals", "üìã –ß—Ç–æ —è –µ–ª —Å–µ–≥–æ–¥–Ω—è"),
            ("reset_today", "‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"),
            ("subscription", "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞"),
            ("feedback", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å")
        ]

        await bot.set_my_commands([
            types.BotCommand(command=c[0], description=c[1]) for c in commands
        ])
        
        # –ü–µ—Ä–µ–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –≤ —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        subscription_renewal_service.set_bot(bot)
        renewal_task = asyncio.create_task(subscription_renewal_service.start())

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
    finally:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
        await subscription_renewal_service.stop()
        if 'renewal_task' in locals():
            renewal_task.cancel()
            try:
                await renewal_task
            except asyncio.CancelledError:
                pass
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞
        await bot.session.close()

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ main
    asyncio.run(main())
