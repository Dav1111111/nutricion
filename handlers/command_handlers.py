import logging
from typing import Dict, List, Optional, Any
from aiogram import types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession

from services.ai_service import ai_service, debug_api_calls
from database.repository import user_repository, message_repository, meal_log_repository
from database.repository import nutritional_goal_repository, user_preference_repository
from utils.image_utils import image_utils
from config.config import config
from utils.inline_keyboards import main_inline_menu
from aiogram.types import ReplyKeyboardRemove
from database.subscription_repository import subscription_repository, usage_repository
from services.payment_service import payment_service

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class UserStates(StatesGroup):
    awaiting_feedback = State()
    awaiting_question = State()
    awaiting_meal_type = State()
    awaiting_preferences = State()
    awaiting_goal_type = State()
    awaiting_calories = State()
    awaiting_meal_plan_confirmation = State()
    awaiting_report_period = State()
    awaiting_feedback_message = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    awaiting_meal_edit = State()  # –ù–æ–≤–æ–µ: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ö–ë–ñ–£ –±–ª—é–¥–∞
    awaiting_meal_edit_description = State()  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–∏—Å—ã–≤–∞–µ—Ç –±–ª—é–¥–æ

class CommandHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""

    @staticmethod
    async def start_command(message: types.Message, state: FSMContext, db: AsyncSession):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await user_repository.get_or_create_user(
                db,
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name
            )

            # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await state.clear()

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            welcome_message = (
                "üëãüèª –ù–∞—á–Ω—ë–º –Ω–∞—à–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ.\n\n"
                "–í –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å —è —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∏ –ë–ñ–£ –ø–æ —Ñ–æ—Ç–æ, –ø–æ—ç—Ç–æ–º—É –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –±–ª—é–¥–∞ –∏ —è —Ä–∞—Å—Å—á–∏—Ç–∞—é –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –ö–ë–ñ–£.\n\n"
                "–¢–∞–∫ –∂–µ –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –ø–∏—Ç–∞–Ω–∏–∏, –µ–¥–µ –∏ –ó–û–ñ.\n\n"
                "–ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –ú–µ–Ω—é —Ç—ã —É–≤–∏–¥–∏—à—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:\n\n"
                "/calories ‚Äî —Ç—É—Ç —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å —Ü–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º –∑–∞ –¥–µ–Ω—å.\n\n"
                "/day_calories ‚Äî —É–∑–Ω–∞–µ—à—å —Å–∫–æ–ª—å–∫–æ –ö–ë–ñ–£ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å –∑–∞ –¥–µ–Ω—å. –î–∞–Ω–Ω—ã–µ –±–µ—Ä—É—Ç—Å—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Å–∫–∏–¥—ã–≤–∞–µ—à—å –±–æ—Ç—É.\n\n"
                "/today_meals ‚Äî —Å–ø–∏—Å–æ–∫ –±–ª—é–¥ —Å –∫–∞–ª–æ—Ä–∏—è–º–∏ —Å—ä–µ–¥–µ–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\n\n"
                "/reset_today ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.\n\n"
                "/subscription ‚Äî —Ç–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞.\n\n"
                "/feedback ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n\n"
                "–î–æ—Å—Ç—É–ø–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ:\n"
                " ‚Ä¢ 5 —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–π –ö–ë–ñ–£ –ø–æ —Ñ–æ—Ç–æ\n"
                " ‚Ä¢ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ –ò–ò –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥—É\n\n"
                "–ü–æ–º–Ω–∏: —Å–æ–≤–µ—Ç—ã –Ω–æ—Å—è—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ –∑–∞–º–µ–Ω—è—é—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤—Ä–∞—á–∞."
            )

            # –£–±–∏—Ä–∞–µ–º –ª—é–±—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
            await message.answer(welcome_message, reply_markup=ReplyKeyboardRemove())

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {str(e)}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    @staticmethod
    async def help_command(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "ü§ñ –ò–ò –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ - —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–∏—Ç–∞–Ω–∏—é\n\n"
            "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/question - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –ø–∏—Ç–∞–Ω–∏–∏\n"
            "/report - –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ –ø–∏—Ç–∞–Ω–∏–∏\n"
            "/prefs - –£–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –ø–∏—Ç–∞–Ω–∏–∏\n"
            "/calories - –£–∫–∞–∑–∞—Ç—å —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π\n\n"
            "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "- –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –±–ª—é–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
            "- –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –ø–∏—Ç–∞–Ω–∏–∏, –¥–∏–µ—Ç–∞—Ö –∏–ª–∏ –∑–¥–æ—Ä–æ–≤–æ–º –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞."
        )
        await message.answer(help_text)
        
    @staticmethod
    async def test_prompt_command(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test_prompt –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
        await message.answer("–¢–µ—Å—Ç–∏—Ä—É—é —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç... –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
        
        # –í—ã–∑–æ–≤ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        result = await debug_api_calls()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await message.answer(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞:\n\n{result}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        await message.answer(
            "–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ñ—Ä–∞–∑—ã '–ö–∞–∫ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥...', –∑–Ω–∞—á–∏—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ. "
            "–ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞."
        )

    @staticmethod
    async def cmd_clear(message: types.Message, db: AsyncSession):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await user_repository.get_by_telegram_id(db, message.from_user.id)

            if not user:
                await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
                return

            # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
            deleted_count = await message_repository.clear_user_history(db, user.id)

            await message.answer(f"üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π.")

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await message_repository.create(
                db,
                user_id=user.id,
                role="system",
                content="–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞"
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /clear: {str(e)}")
            await message.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @staticmethod
    async def cmd_plan(message: types.Message, state: FSMContext, db: AsyncSession):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /plan –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await user_repository.get_by_telegram_id(db, message.from_user.id)

            if not user:
                await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
                return

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–π –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            goals = await nutritional_goal_repository.get_active_goal(db, user.id)
            preferences = await user_preference_repository.get_by_user_id(db, user.id)

            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∏–ª–∏ —Ü–µ–ª–µ–π, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Ö
            if not preferences:
                await message.answer(
                    "üìã –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è.\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ:\n"
                    "‚Ä¢ –¢–∏–ø –¥–∏–µ—Ç—ã (–æ–±—ã—á–Ω–∞—è, –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è, –≤–µ–≥–∞–Ω—Å–∫–∞—è, –∫–µ—Ç–æ –∏ —Ç.–¥.)\n"
                    "‚Ä¢ –ê–ª–ª–µ—Ä–≥–∏–∏ –∏–ª–∏ –Ω–µ–ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
                    "‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –Ω–µ –ª—é–±–∏—Ç–µ\n"
                    "‚Ä¢ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—É—é –∫—É—Ö–Ω—é (–µ—Å–ª–∏ –µ—Å—Ç—å)\n\n"
                    "–ü—Ä–∏–º–µ—Ä: \"–û–±—ã—á–Ω–∞—è –¥–∏–µ—Ç–∞, –∞–ª–ª–µ—Ä–≥–∏—è –Ω–∞ –æ—Ä–µ—Ö–∏, –Ω–µ –ª—é–±–ª—é –±–∞–∫–ª–∞–∂–∞–Ω—ã, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é —Å—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫—É—é –∫—É—Ö–Ω—é\""
                )
                await state.set_state(UserStates.awaiting_preferences)
                return

            if not goals:
                await message.answer(
                    "üéØ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –≤–∞—à–∏ —Ü–µ–ª–∏.\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ü–µ–ª–∏:",
                    reply_markup=types.InlineKeyboardMarkup(
                        inline_keyboard=[
                            [types.InlineKeyboardButton(text="üîΩ –°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞", callback_data="goal_weight_loss")],
                            [types.InlineKeyboardButton(text="üîº –ù–∞–±–æ—Ä –º–∞—Å—Å—ã", callback_data="goal_weight_gain")],
                            [types.InlineKeyboardButton(text="‚û°Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞", callback_data="goal_maintenance")]
                        ]
                    )
                )
                await state.set_state(UserStates.awaiting_goal_type)
                return

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –∏ —Ü–µ–ª–∏, —Å–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
            await CommandHandlers._generate_meal_plan(message, state, db, user.id)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /plan: {str(e)}")
            await message.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @staticmethod
    async def _generate_meal_plan(message: types.Message, state: FSMContext, db: AsyncSession, user_id: int):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∏ —Ü–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–π –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            goals = await nutritional_goal_repository.get_active_goal(db, user_id)
            preferences = await user_preference_repository.get_by_user_id(db, user_id)

            if not goals or not preferences:
                await message.answer("‚ö†Ô∏è –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–ª—è—Ö –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /goals –∏ /prefs.")
                return

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞
            user_prefs = {
                "diet_type": preferences.diet_type or "–æ–±—ã—á–Ω–∞—è",
                "allergies": preferences.allergies or "–Ω–µ—Ç",
                "disliked_foods": preferences.disliked_foods or "–Ω–µ—Ç",
                "preferred_cuisine": preferences.preferred_cuisine or "–ª—é–±–∞—è"
            }

            nutrition_goals = {
                "goal_type": goals.goal_type,
                "target_calories": goals.target_calories,
                "target_proteins": goals.target_proteins,
                "target_fats": goals.target_fats,
                "target_carbs": goals.target_carbs
            }

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            await message.answer("üß™ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ–∫–æ–ª–æ –º–∏–Ω—É—Ç—ã...")

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
            meal_plan = await ai_service.generate_meal_plan(user_prefs, nutrition_goals)

            # –†–∞–∑–±–∏–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
            if len(meal_plan) > 4000:
                parts = [meal_plan[i:i+4000] for i in range(0, len(meal_plan), 4000)]
                for i, part in enumerate(parts):
                    await message.answer(f"üìã –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è (—á–∞—Å—Ç—å {i+1}/{len(parts)}):\n\n{part}", parse_mode="Markdown")
            else:
                await message.answer(f"üìã –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è:\n\n{meal_plan}", parse_mode="Markdown")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            user = await user_repository.get_by_id(db, user_id)
            await message_repository.create(
                db,
                user_id=user_id,
                role="user",
                content="–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è"
            )

            await message_repository.create(
                db,
                user_id=user_id,
                role="assistant",
                content=meal_plan
            )

            # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            await state.clear()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è: {str(e)}")
            await message.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @staticmethod
    async def cmd_goals(message: types.Message, state: FSMContext, db: AsyncSession):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /goals –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–µ–π –ø–æ –ø–∏—Ç–∞–Ω–∏—é"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await user_repository.get_by_telegram_id(db, message.from_user.id)

            if not user:
                await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
                return

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–ª–µ–π
            current_goal = await nutritional_goal_repository.get_active_goal(db, user.id)

            if current_goal:
                goal_info = (
                    f"üéØ *–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Ü–µ–ª–∏:*\n\n"
                    f"–¢–∏–ø —Ü–µ–ª–∏: {current_goal.goal_type}\n"
                    f"–¶–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏: {current_goal.target_calories} –∫–∫–∞–ª/–¥–µ–Ω—å\n"
                    f"–¶–µ–ª–µ–≤–æ–π –±–µ–ª–æ–∫: {current_goal.target_proteins} –≥/–¥–µ–Ω—å\n"
                    f"–¶–µ–ª–µ–≤—ã–µ –∂–∏—Ä—ã: {current_goal.target_fats} –≥/–¥–µ–Ω—å\n"
                    f"–¶–µ–ª–µ–≤—ã–µ —É–≥–ª–µ–≤–æ–¥—ã: {current_goal.target_carbs} –≥/–¥–µ–Ω—å\n\n"
                    f"–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª–∏?"
                )

                await message.answer(
                    goal_info,
                    parse_mode="Markdown",
                    reply_markup=types.InlineKeyboardMarkup(
                        inline_keyboard=[
                            [types.InlineKeyboardButton(text="‚úÖ –î–∞, –∏–∑–º–µ–Ω–∏—Ç—å", callback_data="change_goals")],
                            [types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å", callback_data="keep_goals")]
                        ]
                    )
                )
            else:
                await message.answer(
                    "üéØ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π –ø–æ –ø–∏—Ç–∞–Ω–∏—é. –•–æ—Ç–∏—Ç–µ –∏—Ö —É–∫–∞–∑–∞—Ç—å?",
                    reply_markup=types.InlineKeyboardMarkup(
                        inline_keyboard=[
                            [types.InlineKeyboardButton(text="‚úèÔ∏è –£–∫–∞–∑–∞—Ç—å —Ü–µ–ª–∏", callback_data="change_goals")],
                            [types.InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="keep_goals")]
                        ]
                    )
                )
                await state.set_state(UserStates.awaiting_goal_type)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /goals: {str(e)}")
            await message.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @staticmethod
    async def cmd_prefs(message: types.Message, state: FSMContext, db: AsyncSession):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /prefs –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –≤ –ø–∏—Ç–∞–Ω–∏–∏"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await user_repository.get_by_telegram_id(db, message.from_user.id)

            if not user:
                await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
                return

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
            preferences = await user_preference_repository.get_by_user_id(db, user.id)

            if preferences:
                pref_info = (
                    f"üçΩÔ∏è *–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:*\n\n"
                    f"–¢–∏–ø –¥–∏–µ—Ç—ã: {preferences.diet_type or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                    f"–ê–ª–ª–µ—Ä–≥–∏–∏: {preferences.allergies or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                    f"–ù–µ–ª—é–±–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã: {preferences.disliked_foods or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                    f"–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è –∫—É—Ö–Ω—è: {preferences.preferred_cuisine or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
                    f"–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è?"
                )

                await message.answer(
                    pref_info,
                    parse_mode="Markdown",
                    reply_markup=types.InlineKeyboardMarkup(
                        inline_keyboard=[
                            [types.InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="change_prefs")],
                            [types.InlineKeyboardButton(text="‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", callback_data="keep_prefs")]
                        ]
                    )
                )
            else:
                await message.answer(
                    "üçΩÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –≤ –ø–∏—Ç–∞–Ω–∏–∏. –•–æ—Ç–∏—Ç–µ –∏—Ö —É–∫–∞–∑–∞—Ç—å?",
                    reply_markup=types.InlineKeyboardMarkup(
                        inline_keyboard=[
                            [types.InlineKeyboardButton(text="‚úèÔ∏è –£–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è", callback_data="change_prefs")],
                            [types.InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="keep_prefs")]
                        ]
                    )
                )
                await state.set_state(UserStates.awaiting_preferences)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /prefs: {str(e)}")
            await message.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @staticmethod
    async def cmd_report(message: types.Message, state: FSMContext, db: AsyncSession):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /report –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø–∏—Ç–∞–Ω–∏–∏"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await user_repository.get_by_telegram_id(db, message.from_user.id)

            if not user:
                await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
                return

            # –ó–∞–ø—Ä–æ—Å –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞
            await message.answer(
                "üìä –ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –æ –ø–∏—Ç–∞–Ω–∏–∏?",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [types.InlineKeyboardButton(text="üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="report_today")],
                        [types.InlineKeyboardButton(text="üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="report_week")],
                        [types.InlineKeyboardButton(text="üìÖ –ó–∞ –º–µ—Å—è—Ü", callback_data="report_month")]
                    ]
                )
            )
            await state.set_state(UserStates.awaiting_report_period)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /report: {str(e)}")
            await message.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @staticmethod
    async def cmd_stats(message: types.Message, db: AsyncSession):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await user_repository.get_by_telegram_id(db, message.from_user.id)

            if not user:
                await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
                return

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            messages_count = await message_repository.count(db)
            meals_count = await meal_log_repository.count(db)

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_message = (
                f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
                f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.registration_date.strftime('%d.%m.%Y')}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_count}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –æ –ø–∏—Ç–∞–Ω–∏–∏: {meals_count}\n"
            )

            await message.answer(stats_message, parse_mode="Markdown")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /stats: {str(e)}")
            await message.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @staticmethod
    async def reset_command(message: types.Message, db: AsyncSession):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset –¥–ª—è —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–∏"""
        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏ —Å–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞...")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
            api_result = await debug_api_calls()
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å: {config.CLAUDE_MODEL}")
            logger.info(f"–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–∏—â–∏ (–ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤): {config.SYSTEM_PROMPT_FOOD[:50]}...")
            logger.info(f"–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ (–ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤): {config.SYSTEM_PROMPT_NUTRITION[:50]}...")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await user_repository.get_by_telegram_id(db, message.from_user.id)
            if user:
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–±—Ä–æ—Å–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
                await message_repository.create(
                    db,
                    user_id=user.id,
                    role="system",
                    content="–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞"
                )
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            await message.answer(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ API Claude –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n\n{api_result}")
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏ Claude 3.5 Haiku
            await message.answer(
                "‚ÑπÔ∏è –û –º–æ–¥–µ–ª–∏ Claude 3.5 Haiku:\n\n"
                "Claude 3.5 Haiku - —ç—Ç–æ —Å–∞–º–∞—è –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å Anthropic —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ "
                "–ø–∏—â–∏, –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –û–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è –∏ "
                "–±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –≤–µ—Ä—Å–∏—è–º–∏, –æ–Ω–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ "
                "–±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—ã—Å–æ–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã."
            )
            
            await message.answer(f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞:\n\n"
                                f"‚Ä¢ –ú–æ–¥–µ–ª—å: {config.CLAUDE_MODEL}\n"
                                f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {config.MAX_TOKENS}\n"
                                f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏: {config.MAX_HISTORY_LENGTH} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                                f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: 0.2 (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏)")
            
            await message.answer("‚úÖ –°–±—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω. –ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Claude 3.5 Haiku –∏ –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã.")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")
            await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ: {str(e)}")

    @staticmethod
    async def force_prompt_command(message: types.Message, db: AsyncSession):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /force_prompt –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Ñ–∏–∫—Å–∞ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await user_repository.get_by_telegram_id(db, message.from_user.id)
            
            if not user:
                await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
                return
                
            await message.answer(
                "üîß –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ —Ñ—Ä–∞–∑—ã \"–ö–∞–∫ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥...\" –≤ –æ—Ç–≤–µ—Ç—ã –±–æ—Ç–∞.\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —ç—Ç—É —Ñ—Ä–∞–∑—É –≤ –Ω–∞—á–∞–ª–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –º–æ–¥–µ–ª—å Claude –Ω–µ —Å–ª–µ–¥—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É."
            )
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–µ–∂–∏–º–µ
            await message_repository.create(
                db,
                user_id=user.id,
                role="system",
                content="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã '–ö–∞–∫ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥...'"
            )
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
            test_response = await ai_service.answer_nutrition_question("–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ?")
            
            await message.answer(
                f"–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ñ—Ä–∞–∑—ã:\n\n{test_response[:200]}...\n\n"
                "–î–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞: {str(e)}")
            await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    @staticmethod
    async def cmd_calories(message: types.Message, state: FSMContext, db: AsyncSession):
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É—Ç–æ—á–Ω—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä—è–º—É—é."""
        try:
            # –°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
            await state.clear()

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Ü–µ–ª—å
            user = await user_repository.get_by_telegram_id(db, message.from_user.id)

            current_goal = None
            if user:
                current_goal = await nutritional_goal_repository.get_active_goal(db, user.id)

            if current_goal and current_goal.target_calories:
                # –ï—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è —Ü–µ–ª—å ‚Äì –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–∑–º–µ–Ω–∏—Ç—å
                await message.answer(
                    f"üéØ –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Ü–µ–ª—å: {current_goal.target_calories:.0f} –∫–∫–∞–ª/–¥–µ–Ω—å\n\n–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ—ë?",
                    reply_markup=types.InlineKeyboardMarkup(
                        inline_keyboard=[
                            [types.InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="change_calories")],
                            [types.InlineKeyboardButton(text="‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", callback_data="keep_calories")]
                        ]
                    )
                )
            else:
                # –¶–µ–ª–∏ –µ—â—ë –Ω–µ—Ç ‚Äì –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                await message.answer("–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –≤ –¥–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2000):")
                await state.set_state(UserStates.awaiting_calories)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /calories: {str(e)}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @staticmethod
    async def cmd_day_calories(message: types.Message, db: AsyncSession):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–ª—ë–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∫–∞–ª–æ—Ä–∏–∏ –∏ –º–∞–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç—ã."""
        try:
            user = await user_repository.get_by_telegram_id(db, message.from_user.id)

            if not user:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
                return

            from datetime import datetime

            now = datetime.utcnow()
            date_from = datetime(now.year, now.month, now.day)
            meals = await meal_log_repository.get_meals_by_date(db, user.id, date_from, now)

            total_cal = sum(m.calories or 0 for m in meals)
            total_prot = sum(m.proteins or 0 for m in meals)
            total_fat = sum(m.fats or 0 for m in meals)
            total_carb = sum(m.carbs or 0 for m in meals)

            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            goal = await nutritional_goal_repository.get_active_goal(db, user.id)

            msg = (
                f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è*\n\n"
                f"–ö–∞–ª–æ—Ä–∏–∏: {total_cal:.0f} –∫–∫–∞–ª\n"
                f"–ë–µ–ª–∫–∏: {total_prot:.1f} –≥\n"
                f"–ñ–∏—Ä—ã: {total_fat:.1f} –≥\n"
                f"–£–≥–ª–µ–≤–æ–¥—ã: {total_carb:.1f} –≥\n"
            )

            if goal and goal.target_calories:
                msg += f"üéØ –í–∞—à–∞ —Ü–µ–ª—å: {goal.target_calories:.0f} –∫–∫–∞–ª\n\n"
                diff = total_cal - goal.target_calories

                if abs(diff) <= 50:
                    msg += "‚úÖ *–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!* –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"
                elif diff > 50:
                    msg += f"‚ùå *–¶–µ–ª—å –ø—Ä–µ–≤—ã—à–µ–Ω–∞* –Ω–∞ {diff:.0f} –∫–∫–∞–ª."
                else:
                    msg += f"‚è≥ *–û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Ü–µ–ª–∏:* {abs(diff):.0f} –∫–∫–∞–ª."

            await message.answer(msg, parse_mode="Markdown")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ /day_calories: {str(e)}")
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # ---------- –ù–æ–≤—ã–π: —Å–ø–∏—Å–æ–∫ –±–ª—é–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è ----------
    @staticmethod
    async def cmd_today_meals(message: types.Message, db: AsyncSession):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–ª—é–¥ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å."""
        try:
            user = await user_repository.get_by_telegram_id(db, message.from_user.id)
            if not user:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
                return

            from datetime import datetime
            now = datetime.utcnow()
            date_from = datetime(now.year, now.month, now.day)

            meals = await meal_log_repository.get_meals_by_date(db, user.id, date_from, now)

            if not meals:
                await message.answer("–ó–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–∏—ë–º–∞—Ö –ø–∏—â–∏.")
                return

            text_lines = ["üìã *–°–ø–∏—Å–æ–∫ –±–ª—é–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:*\n"]
            total_cal = 0
            for i, m in enumerate(meals, 1):
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Ä–µ–º—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ç–∞–π–∑–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞, –∞ –Ω–µ –≤ UTC
                from datetime import timezone
                local_dt = m.date
                if m.date.tzinfo is None or m.date.tzinfo == timezone.utc:
                    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ UTC/naive, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
                    local_dt = m.date.replace(tzinfo=timezone.utc).astimezone()

                time_str = local_dt.strftime('%H:%M')
                name = m.meal_name or '–ë–ª—é–¥–æ'
                cal = m.calories or 0
                total_cal += cal
                text_lines.append(f"{i}. {name} ‚Äî {cal:.0f} –∫–∫–∞–ª ({time_str})")

            text_lines.append(f"\n–ò—Ç–æ–≥–æ: {total_cal:.0f} –∫–∫–∞–ª")
            await message.answer("\n".join(text_lines), parse_mode="Markdown")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ /today_meals: {str(e)}")
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–ª—é–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # ---------- –ù–æ–≤—ã–π: —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è ----------
    @staticmethod
    async def cmd_reset_today(message: types.Message, db: AsyncSession):
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ MealLog –∑–∞ —Å–µ–≥–æ–¥–Ω—è."""
        try:
            user = await user_repository.get_by_telegram_id(db, message.from_user.id)
            if not user:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
                return

            from datetime import datetime
            now = datetime.utcnow()
            date_from = datetime(now.year, now.month, now.day)

            meals = await meal_log_repository.get_meals_by_date(db, user.id, date_from, now)
            deleted = 0
            for m in meals:
                ok = await meal_log_repository.delete(db, m.id)
                if ok:
                    deleted += 1

            await message.answer(f"‚ôªÔ∏è –°–±—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω. –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {deleted}.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ /reset_today: {str(e)}")
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @staticmethod
    async def cmd_feedback(message: types.Message, state: FSMContext):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        await message.answer("üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –Ø –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await state.set_state(UserStates.awaiting_feedback_message)

    @staticmethod
    async def cmd_subscription(message: types.Message, db: AsyncSession):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscription –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º
            user = await user_repository.get_or_create_user(
                db,
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
            active_sub = await subscription_repository.get_active_subscription(db, user.id)
            if active_sub:
                end_date = active_sub.end_date.strftime("%d.%m.%Y")
                
                keyboard = types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [types.InlineKeyboardButton(
                            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                            callback_data="cancel_subscription"
                        )]
                    ]
                )
                
                await message.answer(
                    f"‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {end_date}\n\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!",
                    reply_markup=keyboard
                )
                return

            # –¢–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã
            usage = await usage_repository.get_or_create_usage(db, user.id)
            remaining_photos = max(0, config.FREE_PHOTO_LIMIT - usage.photos_used)
            remaining_questions = max(0, config.FREE_QUESTION_LIMIT - usage.questions_used)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
            return_url = f"https://t.me/{(await message.bot.get_me()).username}"
            payment_info = await payment_service.create_payment(
                amount=config.SUBSCRIPTION_PRICE,
                description=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ò–ò –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ –Ω–∞ {config.SUBSCRIPTION_DAYS} –¥–Ω–µ–π",
                return_url=return_url,
                metadata={"user_id": user.id, "telegram_id": user.telegram_id}
            )

            if payment_info:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
                last_sub = await subscription_repository.get_last_subscription(db, user.id)
                first_btn_text = "üí≥ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" if last_sub is None else "üí≥ –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
                await subscription_repository.create_subscription(
                    db,
                    user_id=user.id,
                    payment_id=payment_info["id"],
                    amount=payment_info["amount"]
                )

                await message.answer(
                    f"üí≥ *–ü–æ–¥–ø–∏—Å–∫–∞ –ò–ò –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥*\n\n"
                    f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã: {remaining_photos} —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–π –ö–ë–ñ–£ –ø–æ —Ñ–æ—Ç–æ / {remaining_questions} –≤–æ–ø—Ä–æ—Å–æ–≤ –ò–ò –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥—É\n"
                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {config.SUBSCRIPTION_PRICE} ‚ÇΩ –Ω–∞ {config.SUBSCRIPTION_DAYS} –¥–Ω–µ–π\n\n"
                    f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
                    f"‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ\n"
                    f"‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:",
                    parse_mode="Markdown",
                    reply_markup=types.InlineKeyboardMarkup(
                        inline_keyboard=[
                            [types.InlineKeyboardButton(text=first_btn_text, url=payment_info["confirmation_url"])],
                            [types.InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"check_payment_{payment_info['id']}")],
                            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_payment_{payment_info['id']}")]
                        ]
                    )
                )
            else:
                await message.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /subscription: {str(e)}")
            await message.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
def register_command_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –¥–ª—è aiogram 3.x
    dp.message.register(CommandHandlers.start_command, Command("start"))
    dp.message.register(CommandHandlers.help_command, Command("help"))
    dp.message.register(CommandHandlers.cmd_clear, Command("clear"))
    dp.message.register(CommandHandlers.cmd_goals, Command("goals"))
    dp.message.register(CommandHandlers.cmd_report, Command("report"))
    dp.message.register(CommandHandlers.cmd_stats, Command("stats"))
    dp.message.register(CommandHandlers.test_prompt_command, Command("test_prompt"))
    dp.message.register(CommandHandlers.reset_command, Command("reset"))
    dp.message.register(CommandHandlers.force_prompt_command, Command("force_prompt"))
    dp.message.register(CommandHandlers.cmd_calories, Command("calories"))
    dp.message.register(CommandHandlers.cmd_day_calories, Command("day_calories"))
    dp.message.register(CommandHandlers.cmd_today_meals, Command("today_meals"))
    dp.message.register(CommandHandlers.cmd_reset_today, Command("reset_today"))
    dp.message.register(CommandHandlers.cmd_prefs, Command("prefs"))
    dp.message.register(CommandHandlers.cmd_feedback, Command("feedback"))
    dp.message.register(CommandHandlers.cmd_subscription, Command("subscription"))
