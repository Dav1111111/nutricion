import logging
from typing import Dict, List, Optional, Any
import json
from datetime import datetime

from aiogram import types, F
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest

from handlers.command_handlers import UserStates
from services.ai_service import ai_service
from database.repository import user_repository, message_repository, meal_log_repository
from database.repository import ingredient_repository, feedback_repository, nutritional_goal_repository
from database.subscription_repository import subscription_repository, usage_repository
from utils.image_utils import image_utils
from config.config import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–π—Ç–∞—Ö
MAX_IMAGE_SIZE = 4 * 1024 * 1024  # 4MB

class MessageHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞"""

    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞/–∫–æ—Ä–Ω–∏, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ, —á—Ç–æ –≤–æ–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å –ø–∏—Ç–∞–Ω–∏–µ–º
    _NUTRITION_KEYWORDS = [
        # —Ä—É—Å—Å–∫–∏–µ
        "–∫–∞–ª–æ—Ä", "–∫–∫–∞–ª", "–±–µ–ª–∫", "–∂–∏—Ä", "—É–≥–ª–µ–≤–æ–¥", "–≤–∏—Ç–∞–º–∏–Ω", "–º–∏–Ω–µ—Ä–∞", "–º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç", "–¥–∏–µ—Ç", "–ø–∏—Ç–∞–Ω–∏",
        "–Ω—É—Ç—Ä–∏", "–µ–¥–∞", "–±–∂—É", "—Å–∞—Ö–∞—Ä", "–∫–ª–µ—Ç—á–∞—Ç", "–≥–ª–∏–∫–µ–º", "–∏–Ω—Å—É–ª–∏–Ω", "–≥–∏–¥—Ä–∞—Ç–∞", "–≤–æ–¥–∞", "–ø–µ—Ä–µ–∫—É—Å", "—Ä–∞—Ü–∏–æ–Ω",
        "–≥–æ–ª–æ–¥", "—Ñ–∞—Å—Ç–∏–Ω–≥", "–∫–∏—à–µ—á", "–º–µ—Ç–∞–±–æ–ª", "–æ–∂–∏—Ä–µ–Ω", "–ò–ú–¢", "–º–∞—Å—Å–∞ —Ç–µ–ª–∞", "—Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω", "—Ç—Ä–∏–≥–ª–∏—Ü", "–æ–º–µ–≥–∞",
        "—Å–º–µ—Ç–∞–Ω", "—Ñ—Ä—É–∫—Ç", "–æ–≤–æ—â", "–º–æ–ª–æ–∫", "—Å—ã—Ä", "–π–æ–≥—É—Ä—Ç", "—Ç–≤–æ—Ä–æ–≥", "—Ä—ã–±", "–º—è—Å", "–∫—É—Ä–∏—Ü", "–≥–æ–≤—è–¥–∏–Ω", "—Å–≤–∏–Ω–∏–Ω", "—è–∏—Ü",
        # –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è
        "calorie", "protein", "fat", "carb", "nutrition", "diet", "fiber", "sugar", "glycemic", "fasting", "meal",
        "cholesterol", "omega", "hydration"
    ]

    @staticmethod
    def _is_nutrition_question(text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–≤—è–∑–∞–Ω –ª–∏ –≤–æ–ø—Ä–æ—Å —Å –ø–∏—Ç–∞–Ω–∏–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        t = text.lower()
        return any(kw in t for kw in MessageHandlers._NUTRITION_KEYWORDS)

    @staticmethod
    async def process_photo(message: types.Message, state: FSMContext, db: AsyncSession):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –±–ª—é–¥"""
        processing_msg = None
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await user_repository.get_or_create_user(
                db,
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
            can_use = await usage_repository.can_use_photo(db, user.id)
            if not can_use:
                usage = await usage_repository.get_or_create_usage(db, user.id)
                await message.answer(
                    f"‚ùå –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ —Ñ–æ—Ç–æ ({config.FREE_PHOTO_LIMIT} —à—Ç.)\n\n"
                    f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ {config.SUBSCRIPTION_PRICE} —Ä—É–±./–º–µ—Å—è—Ü",
                    reply_markup=types.InlineKeyboardMarkup(
                        inline_keyboard=[
                            [types.InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")]
                        ]
                    )
                )
                return

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            processing_msg = await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ –±–ª—é–¥–æ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥.")
            
            logger.info(f"–ù–∞—á–∞—Ç –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –±–ª—é–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            if not message.photo or len(message.photo) == 0:
                await message.answer("‚ö†Ô∏è –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –±–ª—é–¥–∞.")
                if processing_msg and hasattr(processing_msg, 'message_id'):
                    await message.bot.delete_message(chat_id=message.chat.id, message_id=processing_msg.message_id)
                return

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–∞–º–æ–≥–æ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            photo = message.photo[-1]
            file_info = await message.bot.get_file(photo.file_id)
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Ä–∞–∑–º–µ—Ä–æ–º {file_info.file_size} –±–∞–π—Ç")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            if file_info.file_size > MAX_IMAGE_SIZE:
                await message.answer("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä - 4MB.")
                await message.bot.delete_message(chat_id=message.chat.id, message_id=processing_msg.message_id)
                return

            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
            file_content = await message.bot.download_file(file_info.file_path)
            file_bytes = file_content.read()

            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            optimized_image = image_utils.optimize_image(file_bytes)
            
            logger.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_path = await image_utils.save_image(optimized_image, user.id)
            
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ –ø—É—Ç–∏: {image_path}")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            history = await message_repository.get_conversation_history(db, user.id)

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            user_text = message.caption if message.caption else "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–µ—Ç–∞–ª—å–Ω–æ —ç—Ç–æ –±–ª—é–¥–æ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ë–ñ–£, –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –∏ –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏. –£–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å –ø–æ—Ä—Ü–∏–∏."

            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            user_message = (f"{user_text}\n\n"
                          f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —ç—Ç–æ–≥–æ –±–ª—é–¥–∞, –≤–∫–ª—é—á–∞—è —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n"
                          f"1. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, —á—Ç–æ —ç—Ç–æ –∑–∞ –±–ª—é–¥–æ\n"
                          f"2. –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å (–∫–∫–∞–ª)\n"
                          f"3. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–Ω—ã–π –ë–ñ–£ –∞–Ω–∞–ª–∏–∑ (–±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã) –≤ –≥—Ä–∞–º–º–∞—Ö\n"
                          f"4. –û—Ü–µ–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–ª–µ—Ç—á–∞—Ç–∫–∏ –∏ —Å–∞—Ö–∞—Ä–∞, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ\n"
                          f"5. –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã\n"
                          f"6. –î–∞–π—Ç–µ –æ—Ü–µ–Ω–∫—É –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ –±–ª—é–¥–∞ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message_repository.create(
                db,
                user_id=user.id,
                role="user",
                content=user_message,
                message_type="image",
                image_path=image_path
            )
            
            logger.info("–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Claude 3.5 Haiku")

            # –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é AI
            analysis = await ai_service.analyze_food_image(optimized_image, user_message, history)
            
            logger.info("–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            ai_message = await message_repository.create(
                db,
                user_id=user.id,
                role="assistant",
                content=analysis
            )

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏
            logger.info("–ò–∑–≤–ª–µ–∫–∞—é —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏")
            nutrition_data = await ai_service.extract_nutrition_data(analysis)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –ù–∞–∑–≤–∞–Ω–∏–µ: {nutrition_data.get('–Ω–∞–∑–≤–∞–Ω–∏–µ_–±–ª—é–¥–∞')}, "
                        f"–ö–∞–ª–æ—Ä–∏–∏: {nutrition_data.get('–∫–∞–ª–æ—Ä–∏–∏')}, "
                        f"–ë–µ–ª–∫–∏: {nutrition_data.get('–±–µ–ª–∫–∏')}–≥, "
                        f"–ñ–∏—Ä—ã: {nutrition_data.get('–∂–∏—Ä—ã')}–≥, "
                        f"–£–≥–ª–µ–≤–æ–¥—ã: {nutrition_data.get('—É–≥–ª–µ–≤–æ–¥—ã')}–≥")

            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏
            meal_log = await meal_log_repository.create(
                db,
                user_id=user.id,
                meal_type="unknown",  # –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
                meal_name=nutrition_data.get("–Ω–∞–∑–≤–∞–Ω–∏–µ_–±–ª—é–¥–∞", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –±–ª—é–¥–æ"),
                image_path=image_path,
                calories=nutrition_data.get("–∫–∞–ª–æ—Ä–∏–∏"),
                proteins=nutrition_data.get("–±–µ–ª–∫–∏"),
                fats=nutrition_data.get("–∂–∏—Ä—ã"),
                carbs=nutrition_data.get("—É–≥–ª–µ–≤–æ–¥—ã"),
                fiber=nutrition_data.get("–∫–ª–µ—Ç—á–∞—Ç–∫–∞"),
                sugar=nutrition_data.get("—Å–∞—Ö–∞—Ä")
            )

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
            for ingredient_name in nutrition_data.get("–æ—Å–Ω–æ–≤–Ω—ã–µ_–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", []):
                await ingredient_repository.create(
                    db,
                    meal_log_id=meal_log.id,
                    name=ingredient_name
                )
            
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –æ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏: {meal_log.id}")

            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            if processing_msg and hasattr(processing_msg, 'message_id'):
                try:
                    await message.bot.delete_message(chat_id=message.chat.id, message_id=processing_msg.message_id)
                except Exception as delete_error:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(delete_error)}")

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –æ –ë–ñ–£ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞
            nutrition_summary = await ai_service.format_nutrition_summary(nutrition_data)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å –∫—Ä–∞—Å–∏–≤–æ–π —Å–≤–æ–¥–∫–æ–π
            full_analysis = analysis
            if nutrition_summary:
                full_analysis = analysis + nutrition_summary

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
            feedback_kb = types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text="‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"edit_meal_{meal_log.id}")]]
            )

            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: –µ—Å–ª–∏ Markdown –ª–æ–º–∞–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
            try:
                sent_message = await message.answer(full_analysis, parse_mode="Markdown", reply_markup=feedback_kb)
            except TelegramBadRequest:
                sent_message = await message.answer(full_analysis, reply_markup=feedback_kb)

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            await usage_repository.increment_photos(db, user.id)

        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {str(e)}")
            await message.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –±–ª—é–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if processing_msg and hasattr(processing_msg, 'message_id'):
                try:
                    await message.bot.delete_message(chat_id=message.chat.id, message_id=processing_msg.message_id)
                except Exception:
                    pass

    @staticmethod
    async def process_text(message: types.Message, state: FSMContext, db: AsyncSession):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –∫–æ–º–∞–Ω–¥—ã
        if message.text.startswith('/'):
            return

        # ---- –ù–æ–≤–æ–µ: —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ "–ö–∞–∫ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥..." ----
        greetings = {
            "–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä",
            "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "hello", "hi", "hey"
        }
        if message.text.lower().strip() in greetings:
            await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –ø–∏—Ç–∞–Ω–∏–∏.")
            return
        # ------------------------------------------------------------------------

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            current_state = await state.get_state()

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await user_repository.get_or_create_user(
                db,
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name
            )

            # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–∑–æ–≤ API
            if message.text.lower() == "—Ç–µ—Å—Ç –ø—Ä–æ–º–ø—Ç–∞":
                from services.ai_service import debug_api_calls
                debug_result = await debug_api_calls()
                await message.answer(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞ API:\n\n{debug_result}")
                return

            # –ï—Å–ª–∏ –∂–¥—ë–º –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if current_state == UserStates.awaiting_meal_edit_description.state:
                await MessageHandlers._process_meal_edit_description(message, state, db, user.id)
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if current_state == UserStates.awaiting_preferences.state:
                await MessageHandlers._process_preferences(message, state, db, user.id)
            elif current_state == UserStates.awaiting_calories.state:
                await MessageHandlers._process_calories(message, state, db, user.id)
            elif current_state == UserStates.awaiting_feedback.state:
                await MessageHandlers._process_feedback(message, state, db, user.id)
            elif current_state == UserStates.awaiting_feedback_message.state:
                await MessageHandlers._process_general_feedback(message, state, db, user.id)
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ –ø–∏—Ç–∞–Ω–∏–∏
                await MessageHandlers._process_nutrition_question(message, db, user.id)

            # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª—é–¥–∞ (—Å—Ç–∞—Ä—ã–π —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —á–∏—Å–µ–ª —É–¥–∞–ª—ë–Ω) ---

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
            await message.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    @staticmethod
    async def _process_preferences(message: types.Message, state: FSMContext, db: AsyncSession, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
            text = message.text.strip()

            # –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            diet_type = None
            allergies = None
            disliked_foods = None
            preferred_cuisine = None

            # –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å –ø–æ–º–æ—â—å—é NLP)
            text_lower = text.lower()

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–∏–µ—Ç—ã
            if "–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫" in text_lower:
                diet_type = "–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è"
            elif "–≤–µ–≥–∞–Ω" in text_lower:
                diet_type = "–≤–µ–≥–∞–Ω—Å–∫–∞—è"
            elif "–∫–µ—Ç–æ" in text_lower:
                diet_type = "–∫–µ—Ç–æ"
            elif "–Ω–∏–∑–∫–æ—É–≥–ª–µ–≤–æ–¥–Ω" in text_lower:
                diet_type = "–Ω–∏–∑–∫–æ—É–≥–ª–µ–≤–æ–¥–Ω–∞—è"
            elif "–ø–∞–ª–µ–æ" in text_lower:
                diet_type = "–ø–∞–ª–µ–æ"
            elif "–æ–±—ã—á–Ω" in text_lower:
                diet_type = "–æ–±—ã—á–Ω–∞—è"

            # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –∞–ª–ª–µ—Ä–≥–∏–∏
            if "–∞–ª–ª–µ—Ä–≥–∏" in text_lower:
                allergies_start = text_lower.find("–∞–ª–ª–µ—Ä–≥–∏")
                allergies_text = text[allergies_start:]
                allergies_end = allergies_text.find(",")
                if allergies_end > 0:
                    allergies = allergies_text[:allergies_end].replace("–∞–ª–ª–µ—Ä–≥–∏—è –Ω–∞ ", "").replace("–∞–ª–ª–µ—Ä–≥–∏–∏ –Ω–∞ ", "")
                else:
                    allergies = allergies_text.replace("–∞–ª–ª–µ—Ä–≥–∏—è –Ω–∞ ", "").replace("–∞–ª–ª–µ—Ä–≥–∏–∏ –Ω–∞ ", "")

            # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –Ω–µ–ª—é–±–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
            if "–Ω–µ –ª—é–±–ª—é" in text_lower:
                disliked_start = text_lower.find("–Ω–µ –ª—é–±–ª—é")
                disliked_text = text[disliked_start:]
                disliked_end = disliked_text.find(",")
                if disliked_end > 0:
                    disliked_foods = disliked_text[:disliked_end].replace("–Ω–µ –ª—é–±–ª—é ", "")
                else:
                    disliked_foods = disliked_text.replace("–Ω–µ –ª—é–±–ª—é ", "")

            # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—É—é –∫—É—Ö–Ω—é
            if "–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é" in text_lower or "–ª—é–±–ª—é" in text_lower:
                cuisine_start = text_lower.find("–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é") if "–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é" in text_lower else text_lower.find("–ª—é–±–ª—é")
                cuisine_text = text[cuisine_start:]
                cuisine_end = cuisine_text.find(",")
                if cuisine_end > 0:
                    preferred_cuisine = cuisine_text[:cuisine_end].replace("–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é ", "").replace("–ª—é–±–ª—é ", "")
                else:
                    preferred_cuisine = cuisine_text.replace("–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é ", "").replace("–ª—é–±–ª—é ", "")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
            preferences = await user_preference_repository.get_by_user_id(db, user_id)

            if preferences:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
                if diet_type:
                    preferences.diet_type = diet_type
                if allergies:
                    preferences.allergies = allergies
                if disliked_foods:
                    preferences.disliked_foods = disliked_foods
                if preferred_cuisine:
                    preferences.preferred_cuisine = preferred_cuisine

                await db.commit()
                await db.refresh(preferences)
            else:
                # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
                preferences = await user_preference_repository.create(
                    db,
                    user_id=user_id,
                    diet_type=diet_type,
                    allergies=allergies,
                    disliked_foods=disliked_foods,
                    preferred_cuisine=preferred_cuisine
                )

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            response = (
                "‚úÖ –í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n\n"
                f"–¢–∏–ø –¥–∏–µ—Ç—ã: {preferences.diet_type or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"–ê–ª–ª–µ—Ä–≥–∏–∏: {preferences.allergies or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"–ù–µ–ª—é–±–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã: {preferences.disliked_foods or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è –∫—É—Ö–Ω—è: {preferences.preferred_cuisine or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"
            )

            await message.answer(response)

            # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            await state.clear()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: {str(e)}")
            await message.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    @staticmethod
    async def _process_calories(message: types.Message, state: FSMContext, db: AsyncSession, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–ª–æ—Ä–∏–π"""
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–ª–æ—Ä–∏–π
            text = message.text.strip()

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–∞
            import re
            calories_match = re.search(r'\d+', text)

            if not calories_match:
                await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2000")
                return

            calories = int(calories_match.group())

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è
            if calories < 500 or calories > 5000:
                await message.answer("‚ö†Ô∏è –£–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 500 –¥–æ 5000 –∫–∫–∞–ª.")
                return

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            goal_type = data.get("goal_type")

            if not goal_type:
                # –ï—Å–ª–∏ —Ç–∏–ø —Ü–µ–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω —á–µ—Ä–µ–∑ /goals, –∏—Å–ø–æ–ª—å–∑—É–µ–º "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
                logger.warning("–¢–∏–ø —Ü–µ–ª–∏ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è '–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
                goal_type = "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞"

            # –†–∞—Å—á–µ—Ç –ë–ñ–£ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞–ª–æ—Ä–∏–π –∏ —Ç–∏–ø–∞ —Ü–µ–ª–∏
            if goal_type == "—Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞":
                # –î–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –≤–µ—Å–∞: –±–æ–ª—å—à–µ –±–µ–ª–∫–∞, –º–µ–Ω—å—à–µ –∂–∏—Ä–æ–≤
                protein = calories * 0.30 / 4  # 30% –æ—Ç –∫–∞–ª–æ—Ä–∏–π - –±–µ–ª–∫–∏ (4 –∫–∫–∞–ª/–≥)
                fat = calories * 0.25 / 9      # 25% –æ—Ç –∫–∞–ª–æ—Ä–∏–π - –∂–∏—Ä—ã (9 –∫–∫–∞–ª/–≥)
                carbs = calories * 0.45 / 4    # 45% –æ—Ç –∫–∞–ª–æ—Ä–∏–π - —É–≥–ª–µ–≤–æ–¥—ã (4 –∫–∫–∞–ª/–≥)
            elif goal_type == "–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã":
                # –î–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã: –±–æ–ª—å—à–µ –±–µ–ª–∫–∞ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤
                protein = calories * 0.25 / 4  # 25% –æ—Ç –∫–∞–ª–æ—Ä–∏–π - –±–µ–ª–∫–∏
                fat = calories * 0.25 / 9      # 25% –æ—Ç –∫–∞–ª–æ—Ä–∏–π - –∂–∏—Ä—ã
                carbs = calories * 0.50 / 4    # 50% –æ—Ç –∫–∞–ª–æ—Ä–∏–π - —É–≥–ª–µ–≤–æ–¥—ã
            else:  # –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞
                # –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è: —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
                protein = calories * 0.20 / 4  # 20% –æ—Ç –∫–∞–ª–æ—Ä–∏–π - –±–µ–ª–∫–∏
                fat = calories * 0.30 / 9      # 30% –æ—Ç –∫–∞–ª–æ—Ä–∏–π - –∂–∏—Ä—ã
                carbs = calories * 0.50 / 4    # 50% –æ—Ç –∫–∞–ª–æ—Ä–∏–π - —É–≥–ª–µ–≤–æ–¥—ã

            # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
            protein = round(protein)
            fat = round(fat)
            carbs = round(carbs)

            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–∏
            current_goal = await nutritional_goal_repository.get_active_goal(db, user_id)

            if current_goal:
                # –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–ª–∏
                await nutritional_goal_repository.update(
                    db,
                    current_goal.id,
                    is_active=False,
                    end_date=datetime.utcnow()
                )

            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–ª–∏
            new_goal = await nutritional_goal_repository.create(
                db,
                user_id=user_id,
                goal_type=goal_type,
                target_calories=calories,
                target_proteins=protein,
                target_fats=fat,
                target_carbs=carbs,
                is_active=True
            )

            # –ö–æ—Ä–æ—Ç–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await message.answer(f"‚úÖ –¶–µ–ª—å {calories} –∫–∫–∞–ª/–¥–µ–Ω—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

            # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            await state.clear()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–ª–æ—Ä–∏–π: {str(e)}")
            await message.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    @staticmethod
    async def _process_feedback(message: types.Message, state: FSMContext, db: AsyncSession, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            feedback_id = data.get("feedback_id")

            if not feedback_id:
                await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å.")
                await state.clear()
                await MessageHandlers._process_nutrition_question(message, db, user_id)
                return

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            feedback = await feedback_repository.get_by_id(db, feedback_id)

            if feedback:
                await feedback_repository.update(
                    db,
                    feedback_id,
                    comment=message.text
                )

                await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞.")
            else:
                await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å.")
                await MessageHandlers._process_nutrition_question(message, db, user_id)

            # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            await state.clear()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {str(e)}")
            await message.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    @staticmethod
    async def _process_general_feedback(message: types.Message, state: FSMContext, db: AsyncSession, user_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            admin_id = config.ADMIN_ID

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = (
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name} (@{message.from_user.username or '–Ω–µ—Ç'})\n"
                f"ID: {message.from_user.id}\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{message.text}"
            )

            try:
                await message.bot.send_message(chat_id=admin_id, text=user_info)
            except Exception as send_err:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {send_err}")

            # –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {str(e)}")
            await message.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @staticmethod
    async def _process_nutrition_question(message: types.Message, db: AsyncSession, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ –ø–∏—Ç–∞–Ω–∏–∏"""
        processing_msg = None
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
            can_use = await usage_repository.can_ask_question(db, user_id)
            if not can_use:
                usage = await usage_repository.get_or_create_usage(db, user_id)
                await message.answer(
                    f"‚ùå –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ ({config.FREE_QUESTION_LIMIT} —à—Ç.)\n\n"
                    f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ {config.SUBSCRIPTION_PRICE} —Ä—É–±./–º–µ—Å—è—Ü",
                    reply_markup=types.InlineKeyboardMarkup(
                        inline_keyboard=[
                            [types.InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")]
                        ]
                    )
                )
                return

            # 1) –ë—ã—Å—Ç—Ä–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.
            is_nutri = MessageHandlers._is_nutrition_question(message.text)

            # 2) –ï—Å–ª–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–µ—Ç, –¥–µ–ª–∞–µ–º –¥–µ—à—ë–≤—É—é LLM-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é (1-2 —Ç–æ–∫–µ–Ω–∞)
            if not is_nutri:
                try:
                    clf_resp = await ai_service.client.chat.completions.create(
                        model=config.GPT_MODEL,
                        messages=[
                            {"role": "system", "content": "–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: YES, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ø–∏—Ç–∞–Ω–∏—é, –µ–¥–µ, –¥–∏–µ—Ç–∞–º, –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞–º, –ø–æ—Ö—É–¥–µ–Ω–∏—é, –Ω–∞–±–æ—Ä—É –≤–µ—Å–∞ –∏–ª–∏ –∑–¥–æ—Ä–æ–≤–æ–º—É –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏; –∏–Ω–∞—á–µ NO."},
                            {"role": "user", "content": message.text}
                        ],
                        max_tokens=1,
                        temperature=0,
                    )
                    answer = clf_resp.choices[0].message.content.strip().lower()
                    is_nutri = answer.startswith("y") or answer.startswith("–¥")  # yes / –¥–∞
                except Exception as _:
                    # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                    pass

            # 3) –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (<= 20 —Å–∏–º–≤–æ–ª–æ–≤)
            #    –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ —Å—á–∏—Ç–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –¥–æ–ø—É—Å–∫–∞–µ–º.
            if not is_nutri and len(message.text.strip()) <= 20 and message.text.isalpha():
                is_nutri = True

            # 4) –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –±—ã–ª –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º, –¥–æ–ø—É—Å–∫–∞–µ–º follow-up.
            if not is_nutri:
                history_short = await message_repository.get_conversation_history(db, user_id, limit=2)
                for h in reversed(history_short):  # –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫ –ø–µ—Ä–≤–æ–º—É
                    if h["role"] == "assistant" and "–∫–∞–∫ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥" in h["content"].lower():
                        is_nutri = True
                        break

            if not is_nutri:
                await message.answer("üõë –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–∏—Ç–∞–Ω–∏–∏, –¥–∏–µ—Ç–∞—Ö –∏ –∑–¥–æ—Ä–æ–≤–æ–º –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏.")
                return

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await message.answer("üí≠ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            history = await message_repository.get_conversation_history(db, user_id)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message_repository.create(
                db,
                user_id=user_id,
                role="user",
                content=message.text
            )

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI
            response = await ai_service.answer_nutrition_question(message.text, history)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            ai_message = await message_repository.create(
                db,
                user_id=user_id,
                role="assistant",
                content=response
            )

            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            if processing_msg and hasattr(processing_msg, 'message_id'):
                try:
                    await message.bot.delete_message(chat_id=message.chat.id, message_id=processing_msg.message_id)
                except Exception as delete_error:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(delete_error)}")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
            try:
                sent_message = await message.answer(response, parse_mode="Markdown")
            except TelegramBadRequest:
                sent_message = await message.answer(response)

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            await usage_repository.increment_questions(db, user_id)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å: {str(e)}")

            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if processing_msg and hasattr(processing_msg, 'message_id'):
                try:
                    await message.bot.delete_message(chat_id=message.chat.id, message_id=processing_msg.message_id)
                except Exception:
                    pass

            await message.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    @staticmethod
    async def _process_meal_edit(message: types.Message, state: FSMContext, db: AsyncSession, user_id: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ö–ë–ñ–£"""
        try:
            data = (await state.get_data()) or {}
            meal_id = data.get("edit_meal_id")
            if not meal_id:
                await message.answer("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –±–ª—é–¥–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                await state.clear()
                return

            # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ 4 —á–∏—Å–µ–ª
            parts = message.text.strip().replace(',', '.').split()
            if len(parts) != 4 or not all(p.replace('.', '', 1).isdigit() for p in parts):
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–µ—Ç—ã—Ä–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: –∫–∞–ª–æ—Ä–∏–∏ –±–µ–ª–∫–∏ –∂–∏—Ä—ã —É–≥–ª–µ–≤–æ–¥—ã")
                return

            cal, prot, fat, carb = map(float, parts)
            from database.repository import meal_log_repository
            await meal_log_repository.update(db, meal_id, {
                "calories": cal,
                "proteins": prot,
                "fats": fat,
                "carbs": carb
            })

            await message.answer("‚úÖ –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            await state.clear()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–ª—é–¥–∞: {e}")
            await message.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    @staticmethod
    async def _process_meal_edit_description(message: types.Message, state: FSMContext, db: AsyncSession, user_id: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –±–ª—é–¥–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        try:
            data = (await state.get_data()) or {}
            meal_id = data.get("edit_meal_id")
            if not meal_id:
                await message.answer("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –±–ª—é–¥–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                await state.clear()
                return

            description = message.text.strip()

            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∏–¥—ë—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            processing_msg = await message.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª—é–¥–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶")

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
            old_ingredients = await ingredient_repository.get_by_meal_id(db, meal_id)
            old_ing_names = [ing.name for ing in old_ingredients]

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–º–µ–Ω–∞
            text_lc = description.lower()
            addition_kw = ["–µ—â—ë", "–µ—â–µ", "–¥–æ–±–∞–≤", "—Ç–∞–∫–∂–µ", "–ø–ª—é—Å", "–∏ "]
            replace_kw = ["–∑–∞–º–µ–Ω", "–≤–º–µ—Å—Ç–æ", "—É–±–µ—Ä", "–±–µ–∑", "–∏—Å–∫–ª—é—á", "–Ω–µ "]

            is_addition = any(k in text_lc for k in addition_kw)
            is_replacement = any(k in text_lc for k in replace_kw)

            merge_ingredients = not is_replacement  # –µ—Å–ª–∏ —è–≤–Ω–∞—è –∑–∞–º–µ–Ω–∞ ‚Äî –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º

            existing_desc = ", ".join(old_ing_names) if old_ing_names else current_log.meal_name

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å, —É—á–∏—Ç—ã–≤–∞—é—â–∏–π —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
            user_message = (
                f"–ò—Å—Ö–æ–¥–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –±–ª—é–¥–∞: {existing_desc}.\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Ç–æ—á–Ω–∏–ª: {description}.\n\n"
                f"–°—Ñ–æ—Ä–º–∏—Ä—É–π –∏—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞, —É—á—Ç—è —ç—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n"
                f"1. –ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
                f"2. –û–±—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å (–∫–∫–∞–ª)\n"
                f"3. –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ë–ñ–£ (–±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã) –≤ –≥—Ä–∞–º–º–∞—Ö\n"
                f"4. –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ ‚Äî –∫–ª–µ—Ç—á–∞—Ç–∫–∞ –∏ —Å–∞—Ö–∞—Ä\n"
                f"5. –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤\n"
                f"6. –û—Ü–µ–Ω–∫–∞ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ –±–ª—é–¥–∞ –ø–æ —à–∫–∞–ª–µ 1‚Äì10"
            )

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞–ª–æ—Ä–∏–π –∏ –ë–ñ–£
            analysis_text = await ai_service.answer_nutrition_question(user_message)
            nutrition_data_new = await ai_service.extract_nutrition_data(analysis_text)

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            current_log = await meal_log_repository.get_by_id(db, meal_id)

            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            nutrition_data_old = {
                "–Ω–∞–∑–≤–∞–Ω–∏–µ_–±–ª—é–¥–∞": current_log.meal_name,
                "–∫–∞–ª–æ—Ä–∏–∏": current_log.calories,
                "–±–µ–ª–∫–∏": current_log.proteins,
                "–∂–∏—Ä—ã": current_log.fats,
                "—É–≥–ª–µ–≤–æ–¥—ã": current_log.carbs,
                "–∫–ª–µ—Ç—á–∞—Ç–∫–∞": getattr(current_log, "fiber", None),
                "—Å–∞—Ö–∞—Ä": getattr(current_log, "sugar", None),
            }

            # –ú–µ—Ä–∂–∏–º: –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –µ—Å–ª–∏ –Ω–µ None
            nutrition_data = nutrition_data_old.copy()
            for k, v in nutrition_data_new.items():
                if v is not None:
                    nutrition_data[k] = v

            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
            await meal_log_repository.update(
                db,
                meal_id,
                meal_name=nutrition_data.get("–Ω–∞–∑–≤–∞–Ω–∏–µ_–±–ª—é–¥–∞", description[:50]),
                calories=nutrition_data.get("–∫–∞–ª–æ—Ä–∏–∏"),
                proteins=nutrition_data.get("–±–µ–ª–∫–∏"),
                fats=nutrition_data.get("–∂–∏—Ä—ã"),
                carbs=nutrition_data.get("—É–≥–ª–µ–≤–æ–¥—ã")
            )

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è
            if nutrition_data_new.get("–æ—Å–Ω–æ–≤–Ω—ã–µ_–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã") is not None:
                new_ing_names = nutrition_data_new["–æ—Å–Ω–æ–≤–Ω—ã–µ_–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã"] or []

                if merge_ingredients:
                    merged_ing_set = set(old_ing_names)
                    merged_ing_set.update(new_ing_names)
                else:
                    # –∑–∞–º–µ–Ω–∞ ‚Äì –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    merged_ing_set = set(new_ing_names) if new_ing_names else set(old_ing_names)

                if merged_ing_set != set(old_ing_names):
                    await ingredient_repository.delete_by_meal_log(db, meal_id)
                    for ing_name in merged_ing_set:
                        await ingredient_repository.create(db, meal_log_id=meal_id, name=ing_name)

            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            updated = await meal_log_repository.get_by_id(db, meal_id)
            summary = (
                "‚úÖ –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {updated.meal_name}\n"
                f"–ö–∞–ª–æ—Ä–∏–∏: {updated.calories or '‚Äî'}\n"
                f"–ë–µ–ª–∫–∏: {updated.proteins or '‚Äî'} –≥\n"
                f"–ñ–∏—Ä—ã: {updated.fats or '‚Äî'} –≥\n"
                f"–£–≥–ª–µ–≤–æ–¥—ã: {updated.carbs or '‚Äî'} –≥"
            )

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            if processing_msg and hasattr(processing_msg, 'message_id'):
                try:
                    await message.bot.delete_message(chat_id=message.chat.id, message_id=processing_msg.message_id)
                except Exception:
                    pass

            await message.answer(summary)

            # –ü–æ–≤—Ç–æ—Ä–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –ø–æ –ë–ñ–£ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            nutrition_summary = await ai_service.format_nutrition_summary(nutrition_data)

            full_analysis = analysis_text
            if nutrition_summary:
                full_analysis += nutrition_summary

            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ (Markdown –º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å)
            try:
                await message.answer(full_analysis, parse_mode="Markdown")
            except TelegramBadRequest:
                await message.answer(full_analysis)

            await state.clear()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –±–ª—é–¥–∞: {e}")
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            try:
                if processing_msg and hasattr(processing_msg, 'message_id'):
                    await message.bot.delete_message(chat_id=message.chat.id, message_id=processing_msg.message_id)
            except Exception:
                pass

            await message.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
def register_message_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è aiogram 3.x
    dp.message.register(MessageHandlers.process_photo, F.photo)
    dp.message.register(MessageHandlers.process_text, F.text)
