import logging
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta
from aiogram import types
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from handlers.command_handlers import UserStates
from services.ai_service import ai_service
from database.repository import user_repository, message_repository, meal_log_repository
from database.repository import nutritional_goal_repository, user_preference_repository, feedback_repository
from database.subscription_repository import subscription_repository, usage_repository
from services.payment_service import payment_service
from config.config import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class CallbackHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –±–æ—Ç–∞"""

    @staticmethod
    async def handle_feedback(callback: types.CallbackQuery, state: FSMContext, db: AsyncSession):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await user_repository.get_by_telegram_id(db, callback.from_user.id)

            if not user:
                await callback.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
                return

            # –ü–∞—Ä—Å–∏–Ω–≥ callback_data
            parts = callback.data.split("_")
            feedback_type = parts[1]  # "good" –∏–ª–∏ "bad"
            message_id = int(parts[2])

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            message = await message_repository.get_by_id(db, message_id)

            if not message:
                await callback.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            feedback = await feedback_repository.create(
                db,
                message_id=message_id,
                rating=5 if feedback_type == "good" else 1
            )

            # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            await callback.message.edit_reply_markup(reply_markup=None)

            if feedback_type == "good":
                await callback.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É!")
                await callback.message.edit_text("‚úÖ –í—ã –æ—Ü–µ–Ω–∏–ª–∏ –æ—Ç–≤–µ—Ç –∫–∞–∫ –ø–æ–ª–µ–∑–Ω—ã–π. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!")
            else:
                await callback.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!")
                await callback.message.edit_text("‚úÖ –í—ã –æ—Ü–µ–Ω–∏–ª–∏ –æ—Ç–≤–µ—Ç –∫–∞–∫ –Ω–µ–ø–æ–ª–µ–∑–Ω—ã–π. –ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å, —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å:")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                await state.set_state(UserStates.awaiting_feedback)
                await state.update_data(feedback_id=feedback.id)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {str(e)}")
            await callback.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.")

    @staticmethod
    async def handle_meal_type(callback: types.CallbackQuery, db: AsyncSession):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await user_repository.get_by_telegram_id(db, callback.from_user.id)

            if not user:
                await callback.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
                return

            # –ü–∞—Ä—Å–∏–Ω–≥ callback_data
            parts = callback.data.split("_")
            meal_type = parts[2]  # "breakfast", "lunch", "dinner", "snack"
            meal_log_id = int(parts[3])

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏
            meal_log = await meal_log_repository.get_by_id(db, meal_log_id)

            if not meal_log:
                await callback.answer("‚ö†Ô∏è –ó–∞–ø–∏—Å—å –æ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
            meal_types = {
                "breakfast": "–∑–∞–≤—Ç—Ä–∞–∫",
                "lunch": "–æ–±–µ–¥",
                "dinner": "—É–∂–∏–Ω",
                "snack": "–ø–µ—Ä–µ–∫—É—Å"
            }

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
            await meal_log_repository.update(
                db,
                meal_log_id,
                meal_type=meal_types.get(meal_type, "unknown")
            )

            # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            await callback.message.edit_reply_markup(reply_markup=None)

            await callback.answer(f"‚úÖ –ü—Ä–∏–µ–º –ø–∏—â–∏ –∑–∞–ø–∏—Å–∞–Ω –∫–∞–∫ {meal_types.get(meal_type)}!")
            await callback.message.edit_text(f"‚úÖ –ü—Ä–∏–µ–º –ø–∏—â–∏ –∑–∞–ø–∏—Å–∞–Ω –∫–∞–∫: {meal_types.get(meal_type)}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏: {str(e)}")
            await callback.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏.")

    @staticmethod
    async def handle_goal_type(callback: types.CallbackQuery, state: FSMContext, db: AsyncSession):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ü–µ–ª–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await user_repository.get_by_telegram_id(db, callback.from_user.id)

            if not user:
                await callback.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
                return

            # –ü–∞—Ä—Å–∏–Ω–≥ callback_data
            parts = callback.data.split("_")
            goal_type = parts[1]  # "weight_loss", "weight_gain", "maintenance"

            # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–∏–ø–∞ —Ü–µ–ª–∏
            goal_types = {
                "weight_loss": "—Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞",
                "weight_gain": "–Ω–∞–±–æ—Ä –º–∞—Å—Å—ã",
                "maintenance": "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞"
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Ü–µ–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(goal_type=goal_types.get(goal_type))

            # –ó–∞–ø—Ä–æ—Å –∫–∞–ª–æ—Ä–∏–π
            await callback.message.edit_text(
                f"üéØ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–µ–ª—å: {goal_types.get(goal_type)}.\n\n"
                f"–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –≤ –¥–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2000):"
            )

            await state.set_state(UserStates.awaiting_calories)

            await callback.answer()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–∏–ø–∞ —Ü–µ–ª–∏: {str(e)}")
            await callback.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–∏–ø–∞ —Ü–µ–ª–∏.")

    @staticmethod
    async def handle_prefs_change(callback: types.CallbackQuery, state: FSMContext, db: AsyncSession):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await user_repository.get_by_telegram_id(db, callback.from_user.id)

            if not user:
                await callback.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
                return

            # –ü–∞—Ä—Å–∏–Ω–≥ callback_data
            action = callback.data.split("_")[1]  # "change" –∏–ª–∏ "keep"

            if action == "change":
                # –ó–∞–ø—Ä–æ—Å –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
                await callback.message.edit_text(
                    "üçΩÔ∏è –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –ø–∏—Ç–∞–Ω–∏–∏:\n\n"
                    "‚Ä¢ –¢–∏–ø –¥–∏–µ—Ç—ã (–æ–±—ã—á–Ω–∞—è, –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∞—è, –≤–µ–≥–∞–Ω—Å–∫–∞—è, –∫–µ—Ç–æ –∏ —Ç.–¥.)\n"
                    "‚Ä¢ –ê–ª–ª–µ—Ä–≥–∏–∏ –∏–ª–∏ –Ω–µ–ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
                    "‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –Ω–µ –ª—é–±–∏—Ç–µ\n"
                    "‚Ä¢ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—É—é –∫—É—Ö–Ω—é (–µ—Å–ª–∏ –µ—Å—Ç—å)\n\n"
                    "–ü—Ä–∏–º–µ—Ä: \"–û–±—ã—á–Ω–∞—è –¥–∏–µ—Ç–∞, –∞–ª–ª–µ—Ä–≥–∏—è –Ω–∞ –æ—Ä–µ—Ö–∏, –Ω–µ –ª—é–±–ª—é –±–∞–∫–ª–∞–∂–∞–Ω—ã, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é —Å—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º–æ—Ä—Å–∫—É—é –∫—É—Ö–Ω—é\""
                )

                await state.set_state(UserStates.awaiting_preferences)
            else:
                # –û—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                await callback.message.edit_text("‚úÖ –í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")

            await callback.answer()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: {str(e)}")
            await callback.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

    @staticmethod
    async def handle_goals_change(callback: types.CallbackQuery, state: FSMContext, db: AsyncSession):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–ª–µ–π"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await user_repository.get_by_telegram_id(db, callback.from_user.id)

            if not user:
                await callback.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
                return

            # –ü–∞—Ä—Å–∏–Ω–≥ callback_data
            action = callback.data.split("_")[1]  # "change" –∏–ª–∏ "keep"

            if action == "change":
                # –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ —Ü–µ–ª–∏
                await callback.message.edit_text(
                    "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –≤–∞—à–µ–π —Ü–µ–ª–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é:",
                    reply_markup=types.InlineKeyboardMarkup(
                        inline_keyboard=[
                            [types.InlineKeyboardButton(text="üîΩ –°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞", callback_data="goal_weight_loss")],
                            [types.InlineKeyboardButton(text="üîº –ù–∞–±–æ—Ä –º–∞—Å—Å—ã", callback_data="goal_weight_gain")],
                            [types.InlineKeyboardButton(text="‚û°Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞", callback_data="goal_maintenance")]
                        ]
                    )
                )

                await state.set_state(UserStates.awaiting_goal_type)
            else:
                # –û—Å—Ç–∞–≤–ª—è–µ–º —Ü–µ–ª–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                await callback.message.edit_text("‚úÖ –í–∞—à–∏ —Ü–µ–ª–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")

            await callback.answer()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–ª–µ–π: {str(e)}")
            await callback.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

    @staticmethod
    async def handle_report_period(callback: types.CallbackQuery, db: AsyncSession):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await user_repository.get_by_telegram_id(db, callback.from_user.id)

            if not user:
                await callback.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
                return

            # –ü–∞—Ä—Å–∏–Ω–≥ callback_data
            parts = callback.data.split("_")
            period = parts[1]  # "today", "week", "month"

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            now = datetime.utcnow()
            if period == "today":
                date_from = datetime(now.year, now.month, now.day)
                date_to = now
                period_name = "—Å–µ–≥–æ–¥–Ω—è"
            elif period == "week":
                date_from = now - timedelta(days=7)
                date_to = now
                period_name = "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é"
            else:  # month
                date_from = now - timedelta(days=30)
                date_to = now
                period_name = "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            meals = await meal_log_repository.get_meals_by_date(db, user.id, date_from, date_to)

            if not meals:
                await callback.message.edit_text(f"‚ö†Ô∏è –ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ ({period_name}) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –æ –ø–∏—Ç–∞–Ω–∏–∏.")
                await callback.answer()
                return

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            meals_data = []
            for meal in meals:
                meal_data = {
                    "—Ç–∏–ø": meal.meal_type,
                    "–Ω–∞–∑–≤–∞–Ω–∏–µ": meal.meal_name,
                    "–∫–∞–ª–æ—Ä–∏–∏": meal.calories,
                    "–±–µ–ª–∫–∏": meal.proteins,
                    "–∂–∏—Ä—ã": meal.fats,
                    "—É–≥–ª–µ–≤–æ–¥—ã": meal.carbs,
                    "–¥–∞—Ç–∞": meal.date.strftime("%d.%m.%Y %H:%M")
                }
                meals_data.append(meal_data)

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            goal = await nutritional_goal_repository.get_active_goal(db, user.id)

            if goal:
                goals_data = {
                    "—Ç–∏–ø_—Ü–µ–ª–∏": goal.goal_type,
                    "—Ü–µ–ª–µ–≤—ã–µ_–∫–∞–ª–æ—Ä–∏–∏": goal.target_calories,
                    "—Ü–µ–ª–µ–≤–æ–π_–±–µ–ª–æ–∫": goal.target_proteins,
                    "—Ü–µ–ª–µ–≤—ã–µ_–∂–∏—Ä—ã": goal.target_fats,
                    "—Ü–µ–ª–µ–≤—ã–µ_—É–≥–ª–µ–≤–æ–¥—ã": goal.target_carbs
                }
            else:
                goals_data = {}

            # –û—Ç–≤–µ—Ç –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
            await callback.message.edit_text(f"üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –æ –ø–∏—Ç–∞–Ω–∏–∏ {period_name}...")

            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–∏—Ç–∞–Ω–∏—è
            report = await ai_service.analyze_nutrition_progress(meals_data, goals_data)

            # –†–∞–∑–±–∏–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
            if len(report) > 4000:
                parts = [report[i:i+4000] for i in range(0, len(report), 4000)]
                for i, part in enumerate(parts):
                    if i == 0:
                        await callback.message.edit_text(f"üìä –û—Ç—á–µ—Ç –æ –ø–∏—Ç–∞–Ω–∏–∏ {period_name} (—á–∞—Å—Ç—å {i+1}/{len(parts)}):\n\n{part}", parse_mode="Markdown")
                    else:
                        await callback.message.answer(f"üìä –û—Ç—á–µ—Ç –æ –ø–∏—Ç–∞–Ω–∏–∏ {period_name} (—á–∞—Å—Ç—å {i+1}/{len(parts)}):\n\n{part}", parse_mode="Markdown")
            else:
                await callback.message.edit_text(f"üìä –û—Ç—á–µ—Ç –æ –ø–∏—Ç–∞–Ω–∏–∏ {period_name}:\n\n{report}", parse_mode="Markdown")

            await callback.answer()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–∞: {str(e)}")
            await callback.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞.")
            await callback.message.edit_text("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @staticmethod
    async def handle_calories_change(callback: types.CallbackQuery, state: FSMContext, db: AsyncSession):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–ª–æ—Ä–∏–π"""
        try:
            user = await user_repository.get_by_telegram_id(db, callback.from_user.id)

            if not user:
                await callback.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
                return

            action = callback.data.split("_")[0]  # change –∏–ª–∏ keep

            if action == "change":
                # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –≤ –¥–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2000):")
                await state.set_state(UserStates.awaiting_calories)
            else:
                await callback.message.edit_text("‚úÖ –¶–µ–ª—å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")

            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–ª–æ—Ä–∏–π: {str(e)}")
            await callback.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

    @staticmethod
    async def handle_subscribe(callback: types.CallbackQuery, db: AsyncSession):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            user = await user_repository.get_by_telegram_id(db, callback.from_user.id)
            if not user:
                await callback.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
            active_sub = await subscription_repository.get_active_subscription(db, user.id)
            if active_sub:
                end_date = active_sub.end_date.strftime("%d.%m.%Y")
                await callback.message.edit_text(
                    f"‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {end_date}\n\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!"
                )
                await callback.answer()
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            usage = await usage_repository.get_or_create_usage(db, user.id)
            remaining_photos = max(0, config.FREE_PHOTO_LIMIT - usage.photos_used)
            remaining_questions = max(0, config.FREE_QUESTION_LIMIT - usage.questions_used)

            # –§–æ—Ä–º–∏—Ä—É–µ–º URL, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—ë—Ç—Å—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
            return_url = f"https://t.me/{(await callback.bot.get_me()).username}"
            payment_info = await payment_service.create_payment(
                amount=config.SUBSCRIPTION_PRICE,
                description=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ò–ò –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ –Ω–∞ {config.SUBSCRIPTION_DAYS} –¥–Ω–µ–π",
                return_url=return_url,
                metadata={"user_id": user.id, "telegram_id": user.telegram_id}
            )
            
            if payment_info:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
                await subscription_repository.create_subscription(
                    db,
                    user_id=user.id,
                    payment_id=payment_info["id"],
                    amount=payment_info["amount"]
                )

                last_sub = await subscription_repository.get_last_subscription(db, user.id)
                first_btn_text = "üí≥ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" if last_sub is None else "üí≥ –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
                
                await callback.message.edit_text(
                    f"üí≥ *–ü–æ–¥–ø–∏—Å–∫–∞ –ò–ò –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥*\n\n"
                    f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã: {remaining_photos} —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–π –ö–ë–ñ–£ –ø–æ —Ñ–æ—Ç–æ / {remaining_questions} –≤–æ–ø—Ä–æ—Å–æ–≤ –ò–ò –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥—É\n"
                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {config.SUBSCRIPTION_PRICE} ‚ÇΩ –Ω–∞ {config.SUBSCRIPTION_DAYS} –¥–Ω–µ–π\n\n"
                    f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
                    f"‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ\n"
                    f"‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n"
                    f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:",
                    parse_mode="Markdown",
                    reply_markup=types.InlineKeyboardMarkup(
                        inline_keyboard=[
                            [types.InlineKeyboardButton(
                                text=first_btn_text, 
                                url=payment_info["confirmation_url"]
                            )],
                            [types.InlineKeyboardButton(
                                text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", 
                                callback_data=f"check_payment_{payment_info['id']}"
                            )],
                            [types.InlineKeyboardButton(
                                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", 
                                callback_data=f"cancel_payment_{payment_info['id']}"
                            )]
                        ]
                    )
                )
            else:
                await callback.message.edit_text(
                    "üòî –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                )
            
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}")
            await callback.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

    @staticmethod
    async def handle_check_payment(callback: types.CallbackQuery, db: AsyncSession):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            payment_id = callback.data.split("_")[2]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            status = await payment_service.check_payment_status(payment_id)
            
            if status == "succeeded":
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                subscription = await subscription_repository.activate_subscription(db, payment_id)
                if subscription:
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                    await usage_repository.reset_usage(db, subscription.user_id)
                    
                    end_date = subscription.end_date.strftime("%d.%m.%Y")
                    await callback.message.edit_text(
                        f"‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!*\n\n"
                        f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ {end_date}\n"
                        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!\n\n"
                        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–µ–∫—Ç–∞! üôè",
                        parse_mode="Markdown"
                    )
            elif status == "pending" or status == "waiting_for_capture":
                await callback.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")
            else:
                await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–Ω–æ–≤–æ.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
            await callback.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞.")

    @staticmethod
    async def handle_cancel_payment(callback: types.CallbackQuery, db: AsyncSession):
        """–û—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã –∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            payment_id = callback.data.split("_")[2]

            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ payment_id –∏ –æ—Ç–º–µ–Ω—è–µ–º
            from sqlalchemy import select
            from models.database import UserSubscription

            result = await db.execute(select(UserSubscription).where(UserSubscription.payment_id == payment_id))
            subscription = result.scalar_one_or_none()

            if subscription and subscription.status == 'pending':
                subscription.status = 'canceled'
                await db.commit()
                await callback.message.edit_text("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
            else:
                await callback.message.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")

            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ–ø–ª–∞—Ç—ã: {str(e)}")
            await callback.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ–ø–ª–∞—Ç—ã.")

    @staticmethod
    async def handle_menu_feedback(callback: types.CallbackQuery, state: FSMContext, db: AsyncSession):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            await callback.message.answer("üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à—É –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!")
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            await state.set_state(UserStates.awaiting_feedback_message)
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ menu_feedback: {str(e)}")
            await callback.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @staticmethod
    async def handle_toggle_auto_renewal(callback: types.CallbackQuery, db: AsyncSession):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            user = await user_repository.get_by_telegram_id(db, callback.from_user.id)
            if not user:
                await callback.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
            active_sub = await subscription_repository.get_active_subscription(db, user.id)
            if not active_sub:
                await callback.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")
                return
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ
            new_status = not active_sub.is_auto_renewal
            updated_sub = await subscription_repository.toggle_auto_renewal(db, user.id, new_status)
            
            if updated_sub:
                status_text = "–≤–∫–ª—é—á–µ–Ω–æ" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω–æ"
                await callback.message.edit_text(
                    f"‚úÖ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ {status_text}!\n\n"
                    f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {updated_sub.end_date.strftime('%d.%m.%Y')}\n\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ /subscription",
                    reply_markup=types.InlineKeyboardMarkup(
                        inline_keyboard=[
                            [types.InlineKeyboardButton(
                                text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è",
                                callback_data="back_to_subscription"
                            )]
                        ]
                    )
                )
                await callback.answer(f"–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ {status_text}")
            else:
                await callback.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è: {str(e)}")
            await callback.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    @staticmethod
    async def handle_cancel_subscription(callback: types.CallbackQuery, db: AsyncSession):
        """–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await callback.message.edit_text(
                "‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?\n\n"
                "–í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–æ –∫–æ–Ω—Ü–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [types.InlineKeyboardButton(
                            text="‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å",
                            callback_data="confirm_cancel_subscription"
                        )],
                        [types.InlineKeyboardButton(
                            text="‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å",
                            callback_data="back_to_subscription"
                        )]
                    ]
                )
            )
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}")
            await callback.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    @staticmethod
    async def handle_confirm_cancel_subscription(callback: types.CallbackQuery, db: AsyncSession):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–º–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            user = await user_repository.get_by_telegram_id(db, callback.from_user.id)
            if not user:
                await callback.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
            active_sub = await subscription_repository.get_active_subscription(db, user.id)
            if not active_sub:
                await callback.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")
                return
            
            # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ canceled, —á—Ç–æ–±—ã –Ω–µ —Å—á–∏—Ç–∞–ª–∞—Å—å –∞–∫—Ç–∏–≤–Ω–æ–π
            active_sub.status = 'canceled'
            await db.commit()
 
            await callback.message.edit_text(
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–æ {active_sub.end_date.strftime('%d.%m.%Y')}\n\n"
                f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –±—ã–ª–∏ —Å –Ω–∞–º–∏! üôè\n\n"
                f"–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ /subscription"
            )
            await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}")
            await callback.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    @staticmethod
    async def handle_back_to_subscription(callback: types.CallbackQuery):
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /subscription
            await callback.message.answer("/subscription")
            await callback.message.delete()
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø–æ–¥–ø–∏—Å–∫–µ: {str(e)}")
            await callback.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    @staticmethod
    async def handle_cancel_renewal(callback: types.CallbackQuery, db: AsyncSession):
        """–û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            payment_id = callback.data.split("_")[2]
            
            # –û—Ç–º–µ–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
            from models.database import UserSubscription
            result = await db.execute(
                select(UserSubscription).where(UserSubscription.payment_id == payment_id)
            )
            subscription = result.scalar_one_or_none()
            
            if subscription and subscription.status == 'pending':
                subscription.status = 'canceled'
                await db.commit()
                
                # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ —É —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                if subscription.parent_payment_id:
                    parent_result = await db.execute(
                        select(UserSubscription).where(
                            UserSubscription.payment_id == subscription.parent_payment_id
                        )
                    )
                    parent_sub = parent_result.scalar_one_or_none()
                    if parent_sub:
                        parent_sub.is_auto_renewal = False
                        await db.commit()
                
                await callback.message.edit_text(
                    "‚úÖ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\n\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ /subscription"
                )
            else:
                await callback.message.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ")
            
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è: {str(e)}")
            await callback.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    @staticmethod
    async def handle_edit_meal(callback: types.CallbackQuery, state: FSMContext, db: AsyncSession):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª—é–¥–∞"""
        try:
            meal_log_id = int(callback.data.split("_")[2])
            meal_log = await meal_log_repository.get_by_id(db, meal_log_id)

            if not meal_log:
                await callback.answer("‚ö†Ô∏è –ó–∞–ø–∏—Å—å –æ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            # –ü—Ä–æ—Å–∏–º —É—Ç–æ—á–Ω–∏—Ç—å –±–ª—é–¥–æ/–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
            from handlers.command_handlers import UserStates
            await callback.message.edit_text(
                "‚úèÔ∏è –£—Ç–æ—á–Ω–∏—Ç–µ, —á—Ç–æ –∑–∞ –±–ª—é–¥–æ –ª–∏–±–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç.\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ì—Ä–µ—á–Ω–µ–≤–∞—è –∫–∞—à–∫–∞ 200 –≥ + –∫—É—Ä–∏–Ω–æ–µ –±–µ–¥—Ä–æ 150 –≥'"
            )

            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º meal_id –≤ FSM context
            await state.set_state(UserStates.awaiting_meal_edit_description)
            await state.update_data(edit_meal_id=meal_log_id)
            await callback.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª—é–¥–∞: {str(e)}")
            await callback.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–ª—é–¥–∞.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
def register_callback_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è aiogram 3.x
    dp.callback_query.register(
        CallbackHandlers.handle_feedback,
        lambda c: c.data.startswith("feedback_")
    )

    dp.callback_query.register(
        CallbackHandlers.handle_meal_type,
        lambda c: c.data.startswith("meal_type_")
    )

    dp.callback_query.register(
        CallbackHandlers.handle_goal_type,
        lambda c: c.data.startswith("goal_")
    )

    dp.callback_query.register(
        CallbackHandlers.handle_prefs_change,
        lambda c: c.data.startswith("change_prefs") or c.data.startswith("keep_prefs")
    )

    dp.callback_query.register(
        CallbackHandlers.handle_goals_change,
        lambda c: c.data.startswith("change_goals") or c.data.startswith("keep_goals")
    )

    dp.callback_query.register(
        CallbackHandlers.handle_report_period,
        lambda c: c.data.startswith("report_")
    )

    dp.callback_query.register(
        CallbackHandlers.handle_calories_change,
        lambda c: c.data.startswith("change_calories") or c.data.startswith("keep_calories")
    )

    dp.callback_query.register(
        CallbackHandlers.handle_subscribe,
        lambda c: c.data == "subscribe"
    )

    dp.callback_query.register(
        CallbackHandlers.handle_check_payment,
        lambda c: c.data.startswith("check_payment_")
    )

    dp.callback_query.register(
        CallbackHandlers.handle_cancel_payment,
        lambda c: c.data.startswith("cancel_payment_")
    )

    dp.callback_query.register(
        CallbackHandlers.handle_menu_feedback,
        lambda c: c.data == "menu_feedback"
    )

    dp.callback_query.register(
        CallbackHandlers.handle_cancel_subscription,
        lambda c: c.data == "cancel_subscription"
    )

    dp.callback_query.register(
        CallbackHandlers.handle_confirm_cancel_subscription,
        lambda c: c.data == "confirm_cancel_subscription"
    )

    dp.callback_query.register(
        CallbackHandlers.handle_back_to_subscription,
        lambda c: c.data == "back_to_subscription"
    )

    dp.callback_query.register(
        CallbackHandlers.handle_cancel_renewal,
        lambda c: c.data.startswith("cancel_renewal_")
    )

    # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª—é–¥–∞
    dp.callback_query.register(
        CallbackHandlers.handle_edit_meal,
        lambda c: c.data.startswith("edit_meal_")
    )
