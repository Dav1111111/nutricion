"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
"""
import asyncio
import logging
from datetime import datetime, timedelta

from database.connection import db_connection
from database.subscription_repository import subscription_repository
from services.subscription_renewal_service import subscription_renewal_service

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def check_expiring_subscriptions():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    async with db_connection.async_session() as db:
        # –ü–æ–¥–ø–∏—Å–∫–∏, –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π
        expiring_subs = await subscription_repository.get_expiring_subscriptions(db, days_before=3)
        
        print(f"\nüìÖ –ù–∞–π–¥–µ–Ω–æ {len(expiring_subs)} –ø–æ–¥–ø–∏—Å–æ–∫, –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –≤ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è:\n")
        
        for sub in expiring_subs:
            days_left = (sub.end_date - datetime.utcnow()).days
            auto_renewal = "‚úÖ" if sub.is_auto_renewal else "‚ùå"
            
            print(f"User ID: {sub.user_id}")
            print(f"  - –ò—Å—Ç–µ–∫–∞–µ—Ç: {sub.end_date.strftime('%d.%m.%Y')} (—á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π)")
            print(f"  - –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: {auto_renewal}")
            print(f"  - –ü–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è: {sub.renewal_attempts}")
            print(f"  - –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞: {sub.last_renewal_attempt or '–ù–µ—Ç'}")
            print()


async def force_renewal_check():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ"""
    print("\nüîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫...\n")
    await subscription_renewal_service.check_and_renew_subscriptions()
    print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


async def list_all_active_subscriptions():
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    async with db_connection.async_session() as db:
        from sqlalchemy import select, and_
        from models.database import UserSubscription
        
        result = await db.execute(
            select(UserSubscription).where(
                and_(
                    UserSubscription.status == 'succeeded',
                    UserSubscription.end_date > datetime.utcnow()
                )
            ).order_by(UserSubscription.end_date)
        )
        
        subscriptions = result.scalars().all()
        
        print(f"\nüí≥ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {len(subscriptions)}\n")
        
        for sub in subscriptions:
            days_left = (sub.end_date - datetime.utcnow()).days
            auto_renewal = "‚úÖ" if sub.is_auto_renewal else "‚ùå"
            
            print(f"User ID: {sub.user_id}")
            print(f"  - –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ: {sub.end_date.strftime('%d.%m.%Y')} ({days_left} –¥–Ω–µ–π)")
            print(f"  - –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: {auto_renewal}")
            print(f"  - –°—É–º–º–∞: {sub.amount} {sub.currency}")
            print()


async def main():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await db_connection.init_db()
    
    while True:
        print("\n" + "="*50)
        print("–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ü–ò–°–ö–ê–ú–ò")
        print("="*50)
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ")
        print("3. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏")
        print("0. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")
        
        if choice == "1":
            await check_expiring_subscriptions()
        elif choice == "2":
            await force_renewal_check()
        elif choice == "3":
            await list_all_active_subscriptions()
        elif choice == "0":
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n–í—ã—Ö–æ–¥...") 