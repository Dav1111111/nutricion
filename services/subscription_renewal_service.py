"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
"""
import logging
import asyncio
from datetime import datetime, timedelta
from typing import List
from sqlalchemy.ext.asyncio import AsyncSession

from database.connection import db_connection
from database.subscription_repository import subscription_repository
from services.payment_service import payment_service
from config.config import config

logger = logging.getLogger(__name__)


class SubscriptionRenewalService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–æ–∫"""
    
    def __init__(self):
        self.is_running = False
        self.check_interval = 3600  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
        self.bot = None  # –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–∑–¥–Ω–µ–µ —á–µ—Ä–µ–∑ set_bot
    
    def set_bot(self, bot_instance):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞"""
        self.bot = bot_instance
    
    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è"""
        self.is_running = True
        logger.info("–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω")
        
        while self.is_running:
            try:
                await self.check_and_renew_subscriptions()
                await asyncio.sleep(self.check_interval)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è: {e}")
                await asyncio.sleep(60)  # –ü–æ–¥–æ–∂–¥–∞—Ç—å –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å"""
        self.is_running = False
        logger.info("–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def check_and_renew_subscriptions(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –ø—Ä–æ–¥–ª–∏—Ç—å –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        async with db_connection.async_session() as db:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫
            expiring_subs = await subscription_repository.get_expiring_subscriptions(db, days_before=1)
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(expiring_subs)} –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è")
            
            for subscription in expiring_subs:
                try:
                    await self.process_renewal(db, subscription)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ {subscription.id}: {e}")
                    await subscription_repository.update_renewal_attempt(db, subscription.id)
    
    async def process_renewal(self, db: AsyncSession, subscription: 'UserSubscription'):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        if subscription.renewal_attempts >= 3:
            logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ {subscription.id}")
            await self.notify_user_renewal_failed(subscription)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –ø–æ–ø—ã—Ç–∫–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤
        if subscription.last_renewal_attempt:
            time_since_last = datetime.utcnow() - subscription.last_renewal_attempt
            if time_since_last < timedelta(hours=6):
                logger.info(f"–°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ {subscription.id}")
                return
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        if not self.bot:
            logger.error("Bot instance not set in SubscriptionRenewalService")
            return

        return_url = f"https://t.me/{(await self.bot.get_me()).username}"
        payment_info = await payment_service.create_recurrent_payment(
            amount=subscription.amount,
            description=f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ò–ò –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥",
            return_url=return_url,
            parent_payment_id=subscription.payment_id,
            metadata={
                "user_id": subscription.user_id,
                "telegram_id": subscription.user.telegram_id,
                "is_renewal": True
            }
        )
        
        if payment_info:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø–æ–¥–ø–∏—Å–∫–∏
            new_subscription = await subscription_repository.create_renewal_subscription(
                db, subscription, payment_info["id"]
            )
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ (–¥–ª—è —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π)
            if payment_info.get("status") == "succeeded":
                await subscription_repository.activate_subscription(db, payment_info["id"])
                await self.notify_user_renewal_success(subscription)
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                await self.notify_user_renewal_pending(subscription, payment_info)
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
            await subscription_repository.update_renewal_attempt(db, subscription.id)
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ {subscription.id}")
    
    async def notify_user_renewal_success(self, subscription: 'UserSubscription'):
        """–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–∏"""
        try:
            new_end_date = (subscription.end_date + timedelta(days=config.SUBSCRIPTION_DAYS)).strftime("%d.%m.%Y")
            await self.bot.send_message(
                subscription.user.telegram_id,
                f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ {new_end_date}!\n\n"
                f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞—ë—Ç–µ—Å—å —Å –Ω–∞–º–∏! üôè\n\n"
                f"–£–ø—Ä–∞–≤–ª—è—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º –º–æ–∂–Ω–æ –≤ /subscription"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {subscription.user.telegram_id}: {e}")
    
    async def notify_user_renewal_pending(self, subscription: 'UserSubscription', payment_info: dict):
        """–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            from aiogram import types
            
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(
                        text="üí≥ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                        url=payment_info["confirmation_url"]
                    )],
                    [types.InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ",
                        callback_data=f"cancel_renewal_{payment_info['id']}"
                    )]
                ]
            )
            
            await self.bot.send_message(
                subscription.user.telegram_id,
                f"üìÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç {subscription.end_date.strftime('%d.%m.%Y')}\n\n"
                f"–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂.\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {subscription.amount} ‚ÇΩ",
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {subscription.user.telegram_id}: {e}")
    
    async def notify_user_renewal_failed(self, subscription: 'UserSubscription'):
        """–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–∏"""
        try:
            await self.bot.send_message(
                subscription.user.telegram_id,
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–∏—Ç—å –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É.\n\n"
                f"–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç {subscription.end_date.strftime('%d.%m.%Y')}\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ /subscription"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {subscription.user.telegram_id}: {e}")


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
subscription_renewal_service = SubscriptionRenewalService() 